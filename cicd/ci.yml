# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  vmImage: ubuntu-latest

strategy:
  matrix:
    Python310:
      python.version: '3.10'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install pipx
    pipx install poetry
    poetry install
    poetry build
    cp dist/* ./docker_build_context/
  displayName: 'Install dependencies'

- script: |
    poetry run dvc pull
  displayName: 'Pull data with dvc'
  env:
    AZURE_STORAGE_CONNECTION_STRING: $(DVC-CONNECTION-STRING)

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'poetry run python cicd/update_data.py'
  env: 
    STAGING_DATA_BLOB_CONNECTION_STRING: $(STAGING-DATA-BLOB-CONNECTION-STRING)
    STAGING_DATA_CONTAINER_NAME: $(STAGING-DATA-CONTAINER-NAME)

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'poetry run python cicd/create_training_environment.py'
  displayName: 'Create training environment'
  env: 
    AZURE_ML_RESOURCE_GROUP_NAME: $(AZURE-ML-RESOURCE-GROUP-NAME)
    AZURE_ML_WORKSPACE_NAME: $(AZURE-ML-WORKSPACE-NAME)
    AZURE_ML_SUBSCRIPTION_ID: $(AZURE-ML-SUBSCRIPTION-ID)
    AZURE_CLIENT_SECRET: $(SERVICE-PRINCIPAL-CLIENT-SECRET)
    AZURE_TENANT_ID: $(AZURE-SERVICE-PRINCIPAL-TENANT-ID)
    AZURE_CLIENT_ID: $(AZURE-SERVICE-PRINCIPAL-CLIENT-ID)